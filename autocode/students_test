package coverage

import (
	"fmt"
	"os"
	"testing"
	"time"
)

// DO NOT EDIT THIS FUNCTION
func init() {
	content, err := os.ReadFile("students_test.go")
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("autocode/students_test", content, 0644)
	if err != nil {
		panic(err)
	}
}

// WRITE YOUR CODE BELOW

func TestPerson_Len(t *testing.T) {

	tData:=People{
		Person{"Adam", "Shou", time.Now()},
		Person{"MArk", "Tsukerberg", time.Now()},
		Person{},
	}

	tData_empty:=People{}

	fmt.Printf("tData.Len(): %v\n", tData.Len())
	
	if tData.Len() != 3 {
		t.Errorf("length is not correct. Expected values is 3")
	}

	fmt.Printf("tData_empty.Len(): %v\n", tData_empty.Len())
	
	if tData_empty.Len() != 0 {
		t.Errorf("length is not correct. Expected values is 0")
	}
}


func TestPerson_Less(t *testing.T) {

	tData:=People{
		Person{"Adam", "Shou", time.Date(1965, 10, 1, 0, 0, 0, 0, time.UTC)},
		Person{"Mark", "Tsukerberg", time.Date(2005, 10, 1, 0, 0, 0, 0, time.UTC)},
		Person{},
		Person{"Yasuo", "Sekiro", time.Date(1994, 12, 13, 0, 0, 0, 0, time.UTC)},
		Person{"Yasuo", "Monro", time.Date(1994, 12, 13, 0, 0, 0, 0, time.UTC)},
		Person{"Edward", "Shou", time.Date(1965, 10, 1, 0, 0, 0, 0, time.UTC)},
	}

	if tData.Less(2, 1){

		t.Errorf("birthday comparison: '1-10-2005' is less than '1-10-1965'. Expected FALSE")
	}

	if tData.Less(2, 1){

		t.Errorf("birthday comparison: 'empty date' is less than '1-10-2005'. Expected FALSE")
	}

	if tData.Less(3, 4){

		t.Errorf("Surname comparison: 'Monro' is less than 'Sekiro'. Expected FALSE")
	}

	if tData.Less(5, 0){

		t.Errorf("First name comparison: 'Adam' is less than 'Edward'. Expected FALSE")
	}

}

func TestPerson_Swap(t *testing.T) {

	tData:=People{
		Person{"Adam", "Shou", time.Date(1965, 10, 1, 0, 0, 0, 0, time.UTC)},
		Person{"Mark", "Tsukerberg", time.Date(2005, 10, 1, 0, 0, 0, 0, time.UTC)},
		Person{},
		Person{"Yasuo", "Sekiro", time.Date(1994, 12, 13, 0, 0, 0, 0, time.UTC)},
		Person{"Yasuo", "Monro", time.Date(1994, 12, 13, 0, 0, 0, 0, time.UTC)},
		Person{"Edward", "Shou", time.Date(1965, 10, 1, 0, 0, 0, 0, time.UTC)},
	}

	tData.Swap(0, 1)

	if tData[0].firstName != "Mark"{

		t.Errorf("swap failed: Expected first name: \"Mark\" ")
	}

	tData.Swap(2, 3)
	
	if tData[3].firstName != ""{

		t.Errorf("swap failed: Expected empty first name")
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////

func TestMatrix_New(t *testing.T){

	_, err := New("0")

	if err!= nil{
		t.Errorf("failed to create new matrix with 1 row and 1 column: Expected error to be nil")
	}

	_, err = New("01231241241244214214\n\n")

	if err== nil{
		t.Errorf("created invalid new matrix with empty row: Expected an error")
	}

	_, err = New("1234\n5678\n9012\n3456")

	if err!= nil{
		t.Errorf("failed to create new matrix with 4 rows and 4 columns: Expected error to be nil")
	}

	_, err = New("1234\n5678\n9012\n3456\n7890")

	if err != nil{
		t.Errorf("failed to create new matrix with 5 rows and 4 columns: Expected error to be nil")
	}

	_, err = New("1234\n5678\n9012\n3456\n7890")

	if err != nil{
		t.Errorf("failed to create new matrix: Expected error to be nil")
	}


	//t.Errorf("new matrix")
}

func TestMatrix_Rows(t *testing.T){
//TODO: add more tests
	tData, _ := New("1234\n5678\n9012\n3456")

	a:= tData.Rows()
	fmt.Printf("a: %v\n", a)

	rowCount := len(tData.Rows())
	if rowCount!=4 {
		t.Errorf("Rows() returned incorrect count of rows: Expected 4")
	}

	if tData.Rows()[0][0] != 1234{
		t.Errorf("Rows() returned incorrect value: Expected 1234")
	}

	if tData.Rows()[2][0] != 9012{
		t.Errorf("Rows() returned incorrect value: Expected 1234")
	}

	tData, _ = New("0")

	rowCount = len(tData.Rows())
	if rowCount!=1 {
		t.Errorf("Rows() returned incorrect count of rows: Expected 1")
	}
}

func TestMatrix_Cols(t *testing.T){

	tData, _ := New("1234\n5678\n9012\n3456")

	a:= tData.Cols()
	fmt.Printf("a: %v\n", a)

	columnCount := len(tData.Cols())
	if columnCount!=1 {
		t.Errorf("Cols() returned incorrect count of rows: Expected 4")
	}

	if tData.Cols()[0][0] != 1234{
		t.Errorf("Cols() returned incorrect value: Expected 1234")
	}

	if tData.Cols()[0][2] != 9012{
		t.Errorf("Cols() returned incorrect value: Expected 1234")
	}

	tData, _ = New("0")

	columnCount = len(tData.Cols())
	if columnCount!=1 {
		t.Errorf("Cols() returned incorrect count of Cols: Expected 1")
	}
}

func TestMatrix_Set(t *testing.T){

	//t.Errorf("set")
}